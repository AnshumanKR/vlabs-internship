#+TITLE: Building a Web Application : Ground Up to the Cloud
#+Author: Anshuman Karthik R
#+Date: [2016-05-17 Tue]
1.
* Broad Overview
** The Main Aim 
   We're going to be looking at various features pertaining to web
   applications.  This includes the working of a web application, and
   the life cycle, which can further be divided into respective
   sub-categories. 
** The Server-Client Model
   Web applications work on a server client model.  The server side
   application is stored in a server, which is also linked to a
   database. The database stores all relevant data, which is also
   maintained even if the application is not running. The client uses
   a dressed up application in the browser, which provides the
   platform for him to send his request.
** The Interaction Between the Client and the Server
   The client sends a request from the browser through a http, which
   then makes its way to the server and subsequently the server side
   application. The server side application upon responding to the
   request, sends the response back to the browser, from where the
   client sees it. 
* Interfaces 
  The interfaces can be divided into two:
** Rest API
** Composite API
* Life Cycle of a Web Application
* List of Technologies
  - [[https://www.python.org/][Python]]
  - [[https://www.javascript.com/][Javascript]]
  - [[http://www.flask.pocoo.org/][Flask]]
* Diagram
  [[./diagrams/IMG_20160517_092640205.jpg][Diagram for Flow of Request]]

2.
* Data Models
** Relations
   We covered  different types of relations. Assuming basic knowledge of relations and what they are, we also need to know that for a set B,
   B - at least 0
   B? - at most 1
   B!-  exactly 1
   B+- at least 1
   [A,B]- A and B are relations and inverses of each other.
 
** Systems
   Systems take in inputs and give out a particular output. This
   happens when state variables are changed, due to the given input.
   Seeing as a relation connects state variables with each other, a
   change in one would also result in a change in another. Here, we
   focus on what the changes are, as supposed to how the change takes
   place.
** Entities
   For every entity type (can be abstract), we have an entity
   set. Fundamentally, we have as entity as something that stores
   data. Now it is necessary to analyze the user requirements to
   construct suitable relations within the system. This can also
   conveniently be analyzed with Entity Relation (ER) Diagrams. These
   basically involve representing entities as circles, connecting
   them with arrows, signifying the relations they have with each
   other. 
** 
3. 
* Operations

                                                 
|-----------------------+-------------+-------------+--------+---------|
| Operation             | Credentials | Referential | Effect | Remarks |
| Signature             |             | Integrity   | and/or |         |
|                       |             |             | Output |         |
|-----------------------+-------------+-------------+--------+---------|
| getRole(user,session) |             |s:sessionSet |        |         |
|                       |             |             |        |         |
|-----------------------+-------------+-------------+--------+---------|
|                       |             |             |        |         |

